import { createApi } from '@reduxjs/toolkit/query/react'
import { blogtubBaseQuery } from '../../../core/blogtub-base-query'
import { baseQueryWithReauth } from '../../../core/api/base-query-with-reauth'
import { transformResponse } from './utils'
import { FEED_PAGE_SIZE } from '../consts'
import { FeedArticle } from './dto/global-feed.in'
import { TagCloudDTO } from './dto/tag-cloud.in'
import { ArticleDTO } from './dto/article.in'
import { ArticleCommentDTO } from './dto/article-comment.in'
import { FavoriteArticleInDTO } from './dto/favorite-article.in'
import { CreateArticleInDTO } from './dto/create-article.in'
import { CreateArticleOutDTO } from './dto/create-article.out'
import { EditArticleInDTO } from './dto/edit-article.in'
import { EditArticleOutDTO } from './dto/edit-article.out'

interface BaseFeedParams {
	page: number
}

interface GlobalFeedParams extends BaseFeedParams {
	tag: string | null
	isPersonalFeed: boolean
}

export interface FeedData {
	articles: FeedArticle[]
	articlesCount: number
}

interface ProfileFeedParams extends BaseFeedParams {
	author: string
	isFavorite?: boolean
}

interface ArticleParams {
	slug: string
}

interface FavoriteArticleParams {
	slug: string
}

interface CreateArticleParams {
	title: string
	description: string
	body: string
	tags: string
}

interface EditArticleParams extends CreateArticleParams {
	slug: string
}

export const feedApi = createApi({
	reducerPath: 'feedApi',
	baseQuery: baseQueryWithReauth,
	endpoints: builder => ({
		getGlobalFeed: builder.query<FeedData, GlobalFeedParams>({
			query: ({ page, tag, isPersonalFeed }) => ({
				url: isPersonalFeed ? '/articles/feed' : '/articles',
				method: 'get',
				params: {
					limit: FEED_PAGE_SIZE,
					offset: page * FEED_PAGE_SIZE,
					tag,
				},
			}),
			transformResponse,
		}),

		getProfileFeed: builder.query<FeedData, ProfileFeedParams>({
			query: ({ page, author, isFavorite = false }) => ({
				url: '/articles',
				method: 'get',
				params: {
					limit: FEED_PAGE_SIZE,
					offset: page * FEED_PAGE_SIZE,
					author: isFavorite ? undefined : author,
					favorited: !isFavorite ? undefined : author,
				},
			}),
			transformResponse,
		}),

		getArticle: builder.query<ArticleDTO, ArticleParams>({
			query: ({ slug }) => ({
				url: `/articles/${slug}`,
				method: 'get',
			}),
		}),

		getArticleComments: builder.query<ArticleCommentDTO, ArticleParams>({
			query: ({ slug }) => ({
				url: `/articles/${slug}/comments`,
				method: 'get',
			}),
		}),

		getTagCloud: builder.query<TagCloudDTO, any>({
			query: () => ({
				url: '/tags',
				method: 'get',
			}),
		}),

		favoriteArticle: builder.mutation<
			FavoriteArticleInDTO,
			FavoriteArticleParams
		>({
			query: ({ slug }) => ({
				url: `/articles/${slug}/favorite`,
				method: 'post',
			}),
		}),

		createArticle: builder.mutation<CreateArticleInDTO, CreateArticleParams>({
			query: ({ title, body, tags }) => {
				const data: CreateArticleOutDTO = {
					article: {
						title,
						body,
						tagList: tags.split(',').map(tag => tag.trim()),
					},
				}

				return {
					url: '/articles',
					method: 'post',
					body: data,
				}
			},
		}),

		editArticle: builder.mutation<EditArticleInDTO, EditArticleParams>({
			query: ({ title, body, tags, slug }) => {
				const data: EditArticleOutDTO = {
					article: {
						title,
						body,
						tagList: tags.split(',').map(tag => tag.trim()),
					},
				}

				return {
					url: `/articles/${slug}`,
					method: 'put',
					body: data,
				}
			},
		}),
	}),
})

export const {
	useGetGlobalFeedQuery,
	useGetTagCloudQuery,
	useGetProfileFeedQuery,
	useGetArticleQuery,
	useGetArticleCommentsQuery,
	useFavoriteArticleMutation,
	useCreateArticleMutation,
	useEditArticleMutation,
} = feedApi // autogenerated hook
